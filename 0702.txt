클래스를 만들고 그 클래스를 사용하기 위해서 인스턴스를 만들기
new 생성자():
->생성자 이름은 클래스 이름과 같습니다.
->new를 이용해서 생성자를 호출하면 생성자를 가지고 인스턴스를 만들고 그 주소릴 리턴합니다.
보통은
클래스이름 참조변수 = new 생성자();

변수(variable)
1.local Variable(지역변수)
==메소드(이름(){}), 나 제어문 안에서 만들어지는 변수, 자기 영역이 끝나면 메모리에서 제거됩니다.
    만들기만 하면 데이터가 없기 때문에 없는 것처럼 간주되다가 처음 값을 대입할 때 만들어 집니다.

2.instance Variable(멤버 변수)
==선언은 클래스 안에서 접근지정자와 함께하고 실제 생성은 객체 별도로 소유하는 변수
   초기화 하지 않으면 0이나 0.0또는 false또는 null로 자동 초기화가 됩니다.
   자신의 멤버에 접근 할 때는 .을 이용해서 접근합니다.

3.Static variable(정적변수)
==클래스 안에서 static이라는 키워드와 함께 선언하는 변수, 무조건 1개만 생성, 한번 만들면 프로그램이
   종료될 때 까지 메모리에 유지, 여로 곳에서 공유할 목적으로 생성
   클래스 이름으로 호출해도 되고 객체 이름으로 호출해도 됩니다.
   객체 이름으로 호출하면 Eclipse에서는 경고됩니다

접근 지정자
== 클래스나 인스턴스 변수나 메소드 클래스 변수나 메소드에 상뇽해서 사용범위를 제한하는것
 
클래스{ 
-public : 모든 곳에서 사용 가능한 클래스
-생략(default): 자신의 package안에서만 사용가능
-protected: 상속받은 곳에서만 사용 가능하다
-private: 현재 위치에서만 사용 가능}

 인스턴트 변수, 메소드{ 
-public 클래스 외부에서 사용가능
-protected: 상속에서만 가능
-default: 패키지내에서는 public, 외부에서는 private
-private : 외부에서는 불가능}
 
 JVM(실행할때 필요) = JRE
JDK(개발할때 필요)  = Java API(Application Programing Interface)
Java Software Development Kit

return{
==메소드의 수행이 종료되고 메소드를 호출한 지점으로 돌아오도록 하는 명령어
    메소드의 수행이 종료된 상태에서 어떤 결과를 호출한 지점으로 넘겨주고자 하면 메소드 이름 앞에
    넘겨주고자 하는 데이터의 자료형을 기재하고 return 다음에 결과를 입력해주면 됩니다.
    메소드의 return이 없을 때는 자료형 대신에 void라고 입력하고 void 메소드는 메소드를 호출한 이후에
    연속해서 작업을 수행할 수 없습니다.
    return되는 데이터가 있으면 그 데이터를 가지고 연속해서 작업을 수행할 수 있습니다.}

argument
==매개변수라고 번역하는데 메소드를 호출할 때 호출하는 쪽에서 넘겨주어야 하는 데이터
    메소드를 선언할 때 괄호안에 자료형과 변수명을 기재하면 메소드를 호출할 때 데이터를 넘겨주어야함
    없으면 생략이 가능하고 개수 제한은 없습니다.

Static 메소드
== 메소드 결과형 앞에 Static을 추가한 메소드
클래스 이름으로 호출할 수 있는 메소드
인스턴스 변수를 사용할 수 없음
객체 생성 없이 메소드를 사용하기 위해 생성     

매개 변수 호출 방법
== 매개변수의 자료형이 value형 인지 reference형 인지로 구분
call by value = 매개 변수의 자료형이 value형 인 경우, 메소드에서 원본의 데이터를 변경할 수 없다.
call by reference = 매개 변수의 자료형이 참조 형인 경우. 메소드에서 원본의 데이터를 변경할 수도 있다.

재귀 호출(recursion - recursive call)
== 메소드가 자기자신을 다시 호출하는 것.
단점: 메모리 사용량이 늘어나고 속도가 느림
장점: 코드를 간결화 

피보나치 수열
==첫번째 항, 두번째 항은 1, 세번째 항부터는 앞 2개의 항의 합

Git Hub 가입하기 Liptalk